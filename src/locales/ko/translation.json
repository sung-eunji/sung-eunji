{
  "back-button": "돌아가기",
  "header": {
    "language": "언어",
    "ViteandReact": "바이트와 리액트"
  },

  "works": {
    "title": "",
    "shopping-mall": "쇼핑몰 관리"
  },
  "briefIntro": {
    "title": "안녕하세요, 성은지 입니다.",
    "description": "저는 리액트 웹 개발자이며, Next.js, TypeScript, Tailwind CSS와 같은 다양한 JavaScript 기술 생태계에 탄탄한 기반을 가지고 있습니다. 전 한국사람이고 현재는 프랑스에서 거주하며 활동하고 있습니다."
  },
  "Project-items": {
    "title1-learn": "이 프로젝트를 통해 얻은 것",
    "title2-challenges": "프로젝트에서 직면한 문제",
    "title3-solution": "해결책",
    "title4-result": "결과",
    "1": {
      "subtitle1-1": "1. 동적 데이터 관리",
      "description1-1": "이 프로젝트를 통해 동적 데이터를 관리하는 데 대한 탄탄한 이해를 쌓을 수 있었습니다. 데이터 변화를 감지하고 상태 업데이트를 최적화하는 방법을 익히며, 복잡한 데이터 흐름을 다루고 성능을 향상시키는 데 있어 큰 발전을 이뤘습니다. 특히 렌더링과 관련된 성능을 개선하는 데 있어 많은 경험을 쌓았습니다.",
      "subtitle1-2": "2. 페어 및 그룹 프로그래밍",
      "description1-2": "페어 및 그룹 프로그래밍 세션에 참여하면서 다양한 작업 스타일에 적응할 수 있게 되었습니다. 팀원들과 함께 작업하는 과정에서 기술적인 역량뿐만 아니라, 건설적인 피드백을 주고받는 능력도 향상되었습니다. 이를 통해 팀의 역동성이 강화되었고, 더욱 강력하고 단합된 팀 환경을 만드는 데 기여했습니다.",

      "subtitle2-1": "1. 렌더링 속도 최적화",
      "description2-1": "동적 데이터를 훅으로 관리하는 과정에서 성능 문제에 직면했습니다. 이미지 깜빡임, 배경 이미지 로딩 지연, 그리고 map 함수 오류로 인해 콘텐츠 누락이나 에러 페이지가 발생하는 문제가 있었으며, 이는 사용자 경험에 큰 영향을 미쳤습니다.",
      "subtitle2-2": "2. 페어 프로그래밍 중 역할 혼동",
      "description2-2": "초기 페어 및 그룹 프로그래밍 세션에서는 드라이버와 네비게이터 역할에 대한 혼동이 있어 비효율이 발생했습니다. 이로 인해 팀의 진행 속도가 저하되었고, 일관성을 유지하기 어려웠습니다.",

      "subtitle3-1": "1. 데이터 처리 단계 세분화",
      "description3-1": "데이터 관리 문제를 해결하기 위해 try-catch 블록을 사용하여 데이터 처리 단계를 세분화했습니다. 이 솔루션은 오류를 분리하고 더 빠르게 감지하여 처리 및 복구할 수 있도록 도와주었으며, 데이터 흐름을 간소화하여 애플리케이션 성능을 개선하는 데 기여했습니다.",
      "subtitle3-2": "2. 역할 명확화 및 커뮤니케이션 개선",
      "description3-2": "팀 내에서 드라이버와 네비게이터 역할을 명확히 정의하면서 팀의 협업 능력이 크게 향상되었습니다. 정기적인 소통과 피드백을 통해 팀워크를 강화했고, 초기 비효율 문제를 극복하며 보다 효과적으로 작업을 진행할 수 있었습니다.",

      "description4-1": "이러한 문제를 극복함으로써 동적 데이터 관리와 성능 최적화 능력을 강화했고, 복잡한 렌더링 문제를 보다 효과적으로 처리하는 방법을 배웠습니다. 또한 페어 및 그룹 프로그래밍을 통한 팀 협업 경험은 제 커뮤니케이션 능력과 팀 내 적응력을 크게 향상시켰습니다. 마지막으로 오류 처리와 디버깅에 대한 깊은 이해를 바탕으로 애플리케이션의 전반적인 품질과 성능을 향상시켰습니다."
    },
    "2": {
      "subtitle1-1": "1. 고급 성능 최적화",
      "description1-1": "이 프로젝트를 통해 웹 애플리케이션의 성능 병목 현상에 대해 깊이 이해하게 되었습니다. 특히 렌더링과 관련된 문제를 해결하는 방법을 배웠습니다. React의 useMemo와 useCallback 훅을 활용해 불필요한 리렌더링을 최소화하여 사용자 경험을 크게 향상시켰습니다. 또한, 데이터 가져오기 전략을 최적화하고 메모리 누수를 줄이는 방법을 통해 부드러운 상호작용을 보장했습니다.",
      "subtitle1-2": "2. 효과적인 팀 커뮤니케이션",
      "description1-2": "페어 및 그룹 프로그래밍에 참여하면서 복잡한 기술 개념을 명확하게 팀원들과 소통하는 능력을 키웠습니다. 우리는 성능 문제를 파악하고 최적화 전략을 논의하기 위해 정기적으로 피드백을 주고받았습니다. 이러한 협력적 접근 방식은 문제 해결에 있어 효율성을 높였고, 더 생산적인 팀 환경을 조성하는 데 기여했습니다.",

      "subtitle2-1": "1. 초기 로딩 시간 및 렌더링 지연",
      "description2-1": "프로젝트 초기에는 큰 데이터 세트를 처리할 때 애플리케이션의 로딩 시간이 느리고 렌더링 지연이 발생했습니다. 컴포넌트가 불필요하게 자주 리렌더링되면서 성능 저하가 발생해, 특히 데이터 필터링 및 시각화 작업 중 사용자 경험이 저하되었습니다.",
      "subtitle2-2": "2. React 훅을 이용한 부작용 관리",
      "description2-2": "useEffect와 같은 훅을 사용하여 부작용을 최적화하는 과정에서 어려움이 있었습니다. 비효율적인 데이터 가져오기와 최적화되지 않은 의존성으로 인해 중복 API 호출, 메모리 누수, 성능 저하가 발생했습니다. 특히 상태가 빠르게 변경되거나 컴포넌트가 언마운트될 때 문제가 심각했습니다.",

      "subtitle3-1": "1. 메모이제이션과 디바운싱 기법 도입",
      "description3-1": "렌더링 비효율 문제를 해결하기 위해 React의 useMemo와 useCallback을 활용하여 컴포넌트 렌더링을 최적화했습니다. 비용이 많이 드는 연산을 메모이제이션하고 검색 입력에 디바운싱을 적용함으로써 불필요한 리렌더링을 줄였고, 애플리케이션의 반응성을 개선했습니다. 이러한 기법들은 업데이트가 필요한 경우에만 적용되도록 하여 성능을 최적화했습니다.",
      "subtitle3-2": "2. 지연 로딩을 통한 데이터 가져오기 개선",
      "description3-2": "중요한 컴포넌트가 아닌 부분에 대해 지연 로딩을 도입하고, 대량의 데이터를 처리할 때 페이징을 구현하여 초기 로딩 시간을 최소화했습니다. 또한, 데이터가 실제로 변경된 경우에만 컴포넌트를 업데이트하도록 데이터 가져오기 전략을 리팩토링했습니다. 이러한 조정은 메모리 사용량을 줄이고 애플리케이션의 전반적인 성능을 향상시켰습니다.",

      "description4-1": "느린 로딩 시간 문제를 해결하고 React 훅을 최적화하면서 애플리케이션 성능을 크게 향상시켰고, 불필요한 리렌더링을 줄여 사용자 상호작용 속도를 개선했습니다. 이러한 노력 덕분에 부작용과 상태 업데이트를 전략적으로 관리하는 방법을 배웠으며, 더 효율적이고 확장 가능한 애플리케이션을 개발할 수 있게 되었습니다. 또한, 페어 및 그룹 프로그래밍 세션에서의 협업 과정을 통해 기술적인 디테일을 효과적으로 소통하는 능력을 향상시키고, 팀 내 문제 해결에 대한 사고방식을 강화할 수 있었습니다.ro"
    },
    "3": {
      "subtitle1-1": "1. OAuth 2.0 인증에 대한 깊은 이해",
      "description1-1": "이 프로젝트를 통해 OAuth 2.0에 대한 종합적인 이해를 얻게 되었습니다. 특히 클라이언트, 서버, 그리고 타사 제공자 간의 인증 및 권한 부여 흐름에 대해 배웠습니다. 액세스 토큰과 리프레시 토큰을 효과적으로 관리하는 방법을 익혀 애플리케이션의 보안과 사용자 경험을 크게 향상시킬 수 있었습니다. 또한 외부 API 통신과 OAuth 토큰 처리에 대한 지식을 깊이 있게 습득할 수 있었습니다.",
      "subtitle1-2": "2. 백엔드 엔지니어와의 협력적 문제 해결 능력",
      "description1-2": "백엔드 엔지니어와 긴밀하게 협력하며, 특히 인증 프로토콜과 관련된 기술적 문제를 명확하게 소통하는 능력을 향상시켰습니다. 함께 API 문제를 해결하고, 토큰 저장 전략을 개선하기 위해 협업했으며, 이러한 협력 환경 덕분에 OAuth 2.0을 효과적으로 구현하고 로그인/회원가입 기능을 원활하게 통합할 수 있었습니다.",

      "subtitle2-1": "1. OAuth 2.0 토큰 만료 및 보안 관리",
      "description2-1": "처음에는 OAuth 2.0 토큰 수명 주기 관리와 토큰 만료 처리에서 어려움을 겪었습니다. 안전한 로그아웃 및 리프레시 토큰 워크플로를 유지하면서도 세션 유지를 보장하는 것이 도전 과제였습니다. 토큰 처리 오류로 인해 사용자가 예기치 않게 로그아웃되는 경우가 발생해 사용자 경험에 부정적인 영향을 미쳤습니다.",
      "subtitle2-2": "2. 다중 라이브러리 사용으로 인한 유효성 검사 중복",
      "description2-2": "OAuth 2.0을 로그인/회원가입 프로세스에 통합하는 과정에서 React-hook-form, zod, shad/cn을 사용하여 유효성 검사를 수행했습니다. 그러나 여러 유효성 검사 라이브러리를 함께 사용하면서 오류 메시지가 중복되는 문제가 발생해 사용자에게 명확한 피드백을 제공하기 어려웠습니다.",

      "subtitle3-1": "1. zod 유효성 검사 제한 및 토큰 처리 최적화",
      "description3-1": "유효성 검사 문제를 해결하기 위해 zod의 사용을 기본적인 유효성 검사 작업으로 제한하고, 사용자 정의 onClick 이벤트를 추가하여 오류 메시지를 리셋하고 관리하는 방식으로 폼 처리를 간소화했습니다. 또한 OAuth 2.0 프로세스를 try-catch 블록으로 세분화하여 토큰 만료 및 세션 복구를 효과적으로 관리함으로써 인증 과정의 보안성과 일관성을 높였습니다.",
      "subtitle3-2": "2. 백엔드와의 협력을 통한 OAuth 통신 개선",
      "description3-2": "백엔드 엔지니어와 긴밀하게 협력하여 OAuth 2.0 흐름을 개선했습니다. 클라이언트, 서버, OAuth 제공자 간의 적절한 통신을 보장하기 위해 카카오 로그인 API 문서를 검토했습니다. 또한 토큰 저장 메커니즘(로컬 스토리지, 세션 스토리지, 쿠키)을 명확히 정의함으로써 보안을 강화하고 API 통신 중 발생하는 CORS 오류의 가능성을 줄였습니다.",

      "description4-1": "OAuth 2.0 토큰 관리와 폼 유효성 검사와 관련된 문제를 해결함으로써 로그인/회원가입 기능의 보안성과 기능을 크게 개선할 수 있었습니다. 이 프로젝트를 통해 토큰 기반 인증과 OAuth 2.0 수명 주기를 완벽히 익히게 되어 사용자 경험이 향상되고, 더 견고한 보안 프로토콜을 구현할 수 있었습니다. 또한, 프로젝트 내내 백엔드 엔지니어들과 협력하며 기술 문제를 함께 해결하는 과정에서 제 커뮤니케이션 능력과 협업 능력이 크게 향상되었습니다."
    }
  },
  "Work-items": {
    "title1": "Supabase를 사용하여 확장 가능한 데이터베이스 스키마를 설계 및 구현하여 백엔드 작업에서 원활한 데이터 관리와 API 라우팅을 보장했습니다.",
    "description1": "처음에는 확장성을 고려한 데이터베이스 스키마를 구조화하는 것이 복잡했습니다. <br /> 특히 많은 데이터 테이블과 관계를 효율적으로 관리하는 것이 어려웠습니다. 예를 들어, 외래 키 제약 조건이나 일대다, 다대다 관계를 신중하게 관리해야 데이터의 일관성을 유지할 수 있었습니다. Supabase의 API 관리 기능을 활용해서 CRUD 작업을 간소화하고, 점점 더 많은 사용자와 데이터가 추가되더라도 애플리케이션이 매끄럽게 확장될 수 있도록 설계했습니다.",
    "title2": "Prisma를 사용해 종합적인 테스트를 통해 데이터 무결성과 애플리케이션 성능을 개선했습니다.",
    "description2": "Prisma 마이그레이션 중에 가장 큰 어려움은 서로 의존하는 데이터 테이블을 처리하는 것이었습니다. 특히 테이블 간의 관계가 복잡하게 얽혀 있는 경우, 잘못된 마이그레이션은 데이터 무결성을 해칠 수 있었습니다. 이 문제를 해결하기 위해 전체 데이터베이스 스키마를 미리 설계하고, 마이그레이션이 기존 데이터를 어떻게 영향을 미칠지 분석했습니다. 이를 바탕으로 Prisma의 db push 및 migrate 명령어를 사용해 마이그레이션을 수행하고, Prisma의 데이터 검증 도구를 활용해 스테이징 환경에서 철저히 테스트한 후 프로덕션에 배포했습니다. 이 과정은 오류를 크게 줄이고 데이터의 무결성을 보장하는 데 기여했습니다.",
    "title3": "Figma를 사용해 디자이너들과 긴밀하게 협업하여 사용자 친화적인 결제 서비스 UI를 개발했으며, 사용자들로부터 긍정적인 피드백을 받았습니다.",
    "description3": "Toss Payments와 Kakao-Pay와 같은 결제 게이트웨이를 프로젝트에 통합하는 과정에서 보안 문제를 처리하는 동시에 원활한 사용자 경험을 보장하는 데 여러 도전 과제가 있었습니다. Figma를 사용하여 디자인 팀과 협업해 여러 UI 반복을 테스트하고 프로토타입을 제작했습니다. 직관적인 레이아웃과 결제 절차에서 불필요한 단계를 최소화하는 데 중점을 두어, 간편한 결제 흐름을 구축했습니다. 특히 반응형 디자인 원칙을 적용해 모바일과 데스크탑 모두에서 매끄럽게 작동하도록 설계했으며, 이러한 작업은 사용자들로부터 긍정적인 피드백을 받았습니다.",
    "title4": "Google Analytics로 측정한 결과, 프론트엔드 성능 및 사용자 경험을 최적화한 후 모바일 사용자 참여율이 25% 증가하고 이탈률이 감소했습니다.",
    "description4": "성능 최적화는 모바일 사용자 참여도를 높이는 데 중요한 역할을 했습니다. Google Lighthouse와 Google Analytics를 사용해 초기 로딩 시간을 분석한 결과, 큰 자산 파일과 불필요한 자바스크립트가 모바일에서 렌더링 속도를 저하시키고 있음을 발견했습니다. 이를 해결하기 위해 이미지를 지연 로딩(Lazy Loading)하고 Webpack을 사용해 번들 크기를 최적화했으며, 비필수 스크립트를 지연 로드하고 React의 Suspense와 React.lazy를 활용해 필요한 시점에만 컴포넌트를 동적으로 로드하도록 했습니다. 이러한 최적화로 모바일 사용자 참여도가 25% 증가했으며, 이탈률도 크게 감소했습니다.",
    "title5": "어려웠던 점 & 해결책",
    "challenges": "이번 프로젝트에서 가장 어려웠던 점 중 하나는 백엔드에서 프론트엔드까지 전체 스택을 이해하고, 각 구성 요소가 어떻게 상호작용하는지 파악하는 것이었습니다. 전담 사수가 없었기 때문에 많은 문제를 스스로 해결해야 했습니다. 특히 Prisma 마이그레이션은 여러 데이터 테이블에 영향을 미치기 때문에 단순한 마이그레이션 작업이 프론트엔드에서 예상치 못한 문제를 일으킬 수 있었습니다.",
    "solutions": "하지만, 팀 내의 협업이 큰 도움이 되었습니다. 비록 전담 멘토는 없었지만, 개발, 디자인, 프로덕트 팀은 주 3회 이상 온라인과 오프라인에서 정기적으로 회의를 했고, Slack을 통해 실시간으로 피드백을 주고받으며 문제를 해결했습니다. 이러한 빈번한 논의 덕분에 문제 해결 방향을 명확히 설정하고, 필요한 지식에 집중할 수 있었습니다. 이 과정에서 복잡한 풀스택 문제를 해결하는 능력을 키우고, 개발자로서 큰 성장을 이룰 수 있었습니다."
  },
  "About": {
    "title1": "협업 역량",
    "description1": "전 안무가로서의 경험을 가진 개발자 입니다. 웹서비스는 사회 경제에, 예술은 사람에게 윤활제 역할을 합니다. 두 분야는 서로 다른 가치를 이바지하지만 좋은 결과물을 내기 위해서는 모두 좋은 업무환경이 필요합니다. 단순히 빠른 결과물만을 추구하는 것이 아니라, 주제를 충분히 숙고하고 자유롭게 의견을 나누며 계획적으로 일하는 것이 진정한 효율의 가치라고 믿습니다. 전 다양한 의견을 주고받고 상대방을 설득하는 과정에서 큰 즐거움을 느끼며, 의견 교환을 통해 만들어진 역동이 만족스러운 결과물로 이어지는 순간에 짜릿함을 느낍니다. 메타인지적 사고를 바탕으로 주도적으로 일하며, 스스로를 객관적으로 인식하고 성장하기 위해 노력합니다. 무용을 하며 제 몸의 형태와 관객의 시선을 분석하던 경험을 바탕으로, 개발 과정에서도 질문의 적절성을 판단하고 서버와 클라이언트의 역할을 이해하는 등 적극적인 소통을 통해 지속적으로 성장하고자 합니다.",
    "title2": "기술 역량",
    "description2": "안정성은 서비스의 핵심이고 사용자에게 신뢰를 제공합니다. 사람의 손이 덜 필요한 자동화 서비스가 안정적 서비스를 이어나가게 합니다. 안정성을 확보하기 위해 지속적인 통합과 배포 시스템 (CI/CD)을 구축하는 것을 추구하고자 합니다. 프로젝트에서 Vercel 으로 CI/CD 파이프라인을 설정하여 개발 과정을 효율적이게 하고 배포과정에서 발생할 수 있는 오류를 사전에 감지하여 신속하게 대응할 수 있었습니다. 이밖에도 aws, Jenkins, 와 같은 배포 도구를 탐구하여 지속적으로 안정성 높은 자동화 서비스를 제공하기를 추구하고자 합니다."
  }
}
